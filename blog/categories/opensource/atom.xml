<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: opensource | iOS Coding]]></title>
  <link href="http://ios-coding.com/blog/categories/opensource/atom.xml" rel="self"/>
  <link href="http://ios-coding.com/"/>
  <updated>2015-11-01T13:06:45+01:00</updated>
  <id>http://ios-coding.com/</id>
  <author>
    <name><![CDATA[Michael Ochs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Maintaining ViewDeck]]></title>
    <link href="http://ios-coding.com/blog/2015/10/31/maintaining-viewdeck/"/>
    <updated>2015-10-31T23:49:46+01:00</updated>
    <id>http://ios-coding.com/blog/2015/10/31/maintaining-viewdeck</id>
    <content type="html"><![CDATA[<p>For a couple of weeks now I have taken over <a href="https://github.com/ViewDeck/ViewDeck">ViewDeck</a> as the maintainer of the library. The original author and maintainer <a href="http://inferis.org">Tom Adriaenssen</a> aka <a href="https://twitter.com/inferis">@inferis</a> is no longer able to take care of this project and has been looking for a new owner for some time now. I want to thank Tom for his work on this great library and I hope I will be able to keep up his good work.</p>

<p>I am planning on changing a couple of things in this library in order to lift this very big project which technically still supports iOS 4 to a current set of technologies. My goal is to provide a future proof option to easily integrate a side bar into every iOS project.</p>

<!--more-->


<h2>tl;dr</h2>

<p>If you are using ViewDeck, you might at least want to read &lsquo;Transition to 3.x&rsquo;. But if you don&rsquo;t even want to read that, the message basically is: There will be a 2.4.0, after that there will be a 3.0.0 and unless you open an issue on GitHub, a couple of features will go away in 3.0.0.</p>

<h2>Hamburger menu</h2>

<p>The hamburger menu has always been discussed very controversial. I myself am a very strong objector of the hamburger menu. So how comes I now maintain a library that does exactly that? Because I think the problem with the hamburger menu is that it is done wrong most of the time. Often a couple of people are discussing what the most important aspects of an application are and if they can&rsquo;t decide, they simply use a hamburger menu and show all of the features of an app, letting the user figure out what really is important. This is bad user experience, in my opinion, and if you have so many features in your app that are all equally important, you may want to reconsider your decision to put them all in one app. For these kind of menus there is the <code>UITabBarController</code> and there is a reason why it can only show a maximum of 5 elements at a time. This is the use case that I would refer to as hamburger menus.</p>

<p>However there are many other reasons where a side menu might make sense. One is Facebook&rsquo;s chat list on the right side. The right side of the screen isn&rsquo;t occupied by any native iOS gestures, so it is a great place to show stuff like a buddy list. This is not a list that shows different features but it is a selection where the user can choose from a list of equal items, in this case their buddies.</p>

<p>The left side of an iOS application is a bit more tricky. In every navigation controller based application the left side of the screen is occupied by the back gesture of the navigation controller. Putting a side menu there leads to a bad user experience. Unless you are an application that is not navigation controller based or you only show the menu in the lowest content controller, where no back gesture is available. A good example for this is Slack. It is an application that technically has a navigation controller but the vast majority of time you spend in the app will be with only one view controller of the navigation stack. So it makes sense to put a list of channels in a left side menu. Metaphorically they are below the main view controller that shows what is going on in a channel, however they are not and should not be the entry point of the application as you are always inside a channel. It makes sense to use a side menu in this case. And again, it shows a list of the same kind of items.</p>

<h2>Semantic versioning</h2>

<p>Currently I am working on a stable 2.4.0 version that fixes the most common bugs that are currently in ViewDeck. This probably will not be the last 2.x version but after this I will start working on a 3.0.0 version which, according to my current plan, will remove a couple of features where I don&rsquo;t see a use case anymore.</p>

<p>I will maintain ViewDeck strickly under the Semantic Versioning system. In short this means, within a given major release (e.g. 2.x) you can be sure that you will not see any breaking changes in the API. There might be methods getting deprecated but they are guaranteed to at least function until the next major release.</p>

<h2>Transition to 3.x</h2>

<p>With the release of 2.4.0 I will flag a lot of methods as deprecated. This does not necessarily mean that the methods and features will go away in 3.0.0. It is a great way for me to get a feeling of what features are currently in use. If you find one of your favorite features to be deprecated in 2.4.0 please create an <a href="https://github.com/ViewDeck/ViewDeck/issues/new">issue on GitHub</a> and let me know.</p>

<p>One of the single biggest changes in 3.0.0 will probably be that it removes compatibility to old iOS releases. I am currently planning to make ViewDeck iOS 8+. As the 3.0.0 release will be at least a couple of month in the future, I think by then the adoption of iOS 8 and iOS 9 will be big enough to safely remove iOS 7 compatibility. This enables a lot of other cleanup work in the code. ViewDeck can then finally move to a fully child-controller enabled pattern where it doesn&rsquo;t need to call appearance methods (<code>viewWillAppear:</code>, <code>viewDidAppear:</code>, &hellip;) manually anymore. Everybody who has written a container view controller in the past knows that this is a big step forward and probably eliminates a lot of code which always means less bugs.</p>

<p>Another thing that I am pretty sure can be removed is the support for top and bottom menues. Not only does this mean less code to maintain but I also think that these menues collide with the iOS notification center and control center, leading to a bad user experience.</p>

<p>There are other features where I want to change the API for them or, in some cases, remove API but not the feature. ViewDeck currently has too many options and it is very hard to get your head around all of them, especially if you are new to the framework and try to integrate this the first time.</p>

<h2>Documentation</h2>

<p>The last thing that I find is very important for a new major release is documentation. For the 3.0.0 release my goal is to have a documentation for all public methods of ViewDeck in the header and in <a href="http://cocoadocs.org">cocoadocs.org</a>.</p>

<p>My goal is to make this a required thing for contributing to this project. In order for a pull request to get merged, the pull request needs to have full, extensive documentation of every newly added public method. Also in order to keep a clean API I will not merge pull requests that implement new features that are not requested by at least a couple of users.</p>

<p>I hope you see my thoughts as an improvement to the library and agree with them. If not, please let me know in the comments or open an issue on GitHub; after all this is an open source project and changes should be made in a democratic way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom error handling on iOS]]></title>
    <link href="http://ios-coding.com/blog/2014/10/03/custom-error-handling-on-ios/"/>
    <updated>2014-10-03T12:56:45+02:00</updated>
    <id>http://ios-coding.com/blog/2014/10/03/custom-error-handling-on-ios</id>
    <content type="html"><![CDATA[<p>In the last weeks I reimplemented the error handling of the HRS app in a way that is painless and very fast for the developer to use, and gives the user a good, detailed and specific error while even allowing him to recover from certain error cases. The way I did this was basically by reimplementing a concept that is available on OS X for a long time now.</p>

<!--more-->


<h2>tl;dr</h2>

<p>I have created a library that is open sourced and maintained by my company and me. It implements the workflow described below. You can use it under the Apache 2.0 License and it is available on <a href="https://github.com/Hotel-Reservation-Service/HRSCustomErrorHandling">github as HRSCustomErrorHandling</a> and via <a href="http://cocoapods.org/?q=HRSCustomErrorHandling">cocoapods</a>. If you do so, I would be happy if you&rsquo;d let me know.</p>

<h2>Common error handling</h2>

<p>Error handling on iOS has always been very painful. In general you trigger an action on the users behalf in one of your view controllers and you might get an <code>NSError</code> in return. There are two common approaches to deal with this error:</p>

<ol>
<li>Display a generic error message to the user that says &lsquo;Something went wrong. Please try again later.&rsquo;</li>
<li>Have a huge block of code that checks the error domain and the error code every time an error can be returned and provide a custom error message to the most common error cases.</li>
</ol>


<p>The latter is definitely the better one as it gives the user a better feedback than &lsquo;something went wrong&rsquo;. However, it is a much bigger pain for the developer, so it is also the option that is rarely used.</p>

<h2>What is already out there?</h2>

<p>The approach I took was to first look up existing concepts. There is an error handling that is already available in iOS&rsquo;s big brother, OS X, that reduces the code to display a custom error message to the user to a single line and also gives the user an option to recover from certain errors.</p>

<p>There already is a sample implementation of this error handling from the people over at <a href="http://realmacsoftware.com/blog/cocoa-error-handling-and-recovery">RealMac software</a>. However a couple of features are missing in their sample that I find very useful in the OS X version.</p>

<p>We wanted to have a way to handle specific errors in a custom and asynchronous way but at a central place in the app. Imagine a server connection that returns an error to you and tells you, that the user is not logged in to the server. You don&rsquo;t want to simply tell the user that this is the case and you also don&rsquo;t want to handle this with a specific dialog in every single part of your app that might be able to get this error. Instead there should be a single place in the application that checks for this error and displays your login dialog.</p>

<p>The error handling I am going to describe in this blog post can deal with this and a couple of other scenarios.</p>

<h2>Responsibilities</h2>

<p>Let&rsquo;s first check which component of the app is responsible for what. Again, OS X is a good guideline for this.</p>

<h3>Creation</h3>

<p>Let&rsquo;s imagine there is a method that creates an <code>NSError</code> instance and passes it to the caller. A method like <code>- (BOOL)save:(NSError **)error</code>. This method usually is somewhere in your data abstraction layer or in other frameworks. If this method is in your code, this is the place where you have as much context information available as possible. You know exactly why the error happened and what went wrong. You might even know what to do to make the error go away. This is the part of code that should put all these informations into the <code>NSError</code> when creating it.</p>

<h3>Handling</h3>

<p>The caller of the <code>save:</code> method mentioned above is your view controller in most of the cases. It is the one that knows what lead to the save action and &ndash; if there are any parameters to the method it called &ndash; it also knows what parameters have been used and what to do if this action should be executed a second time. This layer does not need to have any information about what went wrong. The only information it is interested in is &lsquo;should I try this again or not?&rsquo;.</p>

<p>There are a couple of rare cases where your view controller might also want to modify or skip error presentation. For example a login view controller might not want to display the general &lsquo;your credentials are invalid&rsquo; error, instead it might want to show an inline error message close to the login screen&rsquo;s input text fields to show the user that something went wrong. So there needs to be a way to customize error handling in view controllers.</p>

<h3>Displaying</h3>

<p>Displaying an error is a task that should be handled in general in an applcation. You do not want every error dialog to look different. You might want to show all your errors in a simple alert view or in a custom overlay that integrates nicely into your app&rsquo;s ui, but they should all look the same.</p>

<h2>NSError</h2>

<p>How to create an <code>NSError</code> that has all the information mentioned above? The good thing is, <code>NSError</code> already has an interface to provide all this, and it is right in front of you: Have a look at the keys you can put into the <code>userInfo</code> dictionary of an <code>NSError</code>. There are a couple that are quite common when creating custom errors. The one that is used the most is probably <code>NSLocalizedDescriptionKey</code>. We are not going to use that &ndash; bummer.</p>

<p>Instead, we are going to use almost all of the others:</p>

<ul>
<li><p><code>NSLocalizedFailureReasonErrorKey</code><br/>
This describes what went wrong. This is going to be presented in the title of an alert view, later on.</p></li>
<li><p><code>NSLocalizedRecoverySuggestionErrorKey</code><br/>
This describes what the user can do to fix the error. For example you can tell the user something like <em>&lsquo;Try turning it off and on again&rsquo;</em>, but also some more useful information like <em>&lsquo;Do you want to overwrite the existing file with your new one? This will delete the existing file permanently.&rsquo;</em></p></li>
<li><p><code>NSLocalizedRecoveryOptionsErrorKey</code><br/>
This key should contain an <code>NSArray</code> with localized strings that describe the actions the user can take. Each element is used later on as the text of a button. You should make sure that this key contains at least one cancel operation that simply does nothing except dismissing the alert. A possible array could look like this: <code>@[ @"Overwrite", @"Cancel" ]</code><br/>
One important fact about this array is, that the first option in the array is the default option. This means that if you are going to present the error in an alert view, it is the option on the right most button that is displayed in bold text. In this case that would be the <em>&lsquo;Overwrite&rsquo;</em> option, but be carefull when making a destructive operation the default one!</p></li>
<li><p><code>NSRecoveryAttempterErrorKey</code><br/>
Now this is the most interesting key. It contains an object that conforms to <code>NSErrorRecoveryAttempting</code> protocol. This protocol basically contains a method that can be called with the index of the option the user has choosen. The recovery attempter should then try to fullfil the action behind this option and report back whether it was able to recover from the error or not. If the recovery attempter was successful in recoverying from the error, it is safe for the presenter to retry the action that lead to the error.</p></li>
</ul>


<p>With the above keys we are able to carry all information that is necessary to handle an error case properly inside the <code>NSError</code> object that describes the error. Besides the information shown to the user we can also add logic to the error that can try to recover from an error and communicate back whether we can safely retry the action or not.</p>

<h2>Responder chain</h2>

<p>OS X is using the responder chain for handling and displaying the error. The responder chain is something that is rarely used in iOS by applications, yet it is used by the frameworks all the time. It is responsible for delivering actions like text input or motion gestures.</p>

<p>It is very useful for transporting information up to the application from every <code>UIResponder</code> object through out the app. The good think is: A lot of the objects you are dealing with on a daily basis are in fact inheriting from <code>UIResponder</code>. The one that is well known for being a responder is probably <code>UIView</code>. But all your <code>UIViewController</code>s are responder objects, as well. Even your <code>UIApplication</code> is a responder object, and in the case you are making a game, <code>SKNode</code> is one, too. This basically means that all your code that deals with presentation is a responder or has very easy access to a responder.</p>

<p>Another great feature about responders is, that they build a chain. Each responder object implements a method called <code>nextResponder</code> that returns the next responder in the chain. The chain is build from the deepest point in your application up to the application itself and also, since a couple of iOS releases, even up to your app delegate, as long as it inherits from <code>UIResponder</code>. This means you can dispatch a message to <code>nextResponder</code> recursively and it will end up in your app delegate eventually, which is a very great place to handle application wide behaviour such as presenting an error. And because of this, that is exactly what we are going to do.</p>

<h3>Handling</h3>

<p>OS X implements a method on <code>NSResponder</code> that is called <code>-presentError:</code> which returns a bool telling you whether error recovery was successful or not. Due to the fact that showing modal dialogs on OS X are a blocking operation, this method is blocking, too. Obviously, if you would do this in an iOS application your UI would not be responding anymore and your app would be killed by the watch dog very fast. Luckily we do have blocks now, so this method could easily be changed to something like <code>-presentError:completionHandler:</code>.</p>

<p>The completion handler should then tell you whether error recovery was successful or not. If it was, you can simply call the method that lead to the error again. As blocks hold on to their context, this can be done very easily in most scenarios.</p>

<p>You need to implement the present error method yourself, as it is not available on iOS, but it is very simple. You could either use the github project I created or do this yourself. All the method does, is calling <code>-presentError:completionHandler:</code> on the object returned by <code>-nextResponder</code>. Well, not all. There are a couple of exceptions. Before it does forward the message up the responder chain it calls <code>willPresentError:</code> on itself.</p>

<h4><code>-willPresentError:</code></h4>

<p>This method gets the error passed in and returns an error. The base implementation of this method simply returns the error it was passed. You can now override this method to change the error you return or even return <code>nil</code>. If you return <code>nil</code>, the error is not forwarded up the responder chain by <code>presentError:completionHandler:</code>.</p>

<p>You can use this to solve the problem mentioned in the introduction. Your login view controller simply overrides <code>willPresentError:</code>, checks if the error passed in is a login error, and returns <code>nil</code> in this case. With this hook, every responder in the chain is capable of modifying the error or even stopping the error presentation.</p>

<h4><code>UIViewController</code></h4>

<p>Another exception in <code>-presentError:completionHandler:</code> is that it forwards the message to <code>-[UIApplication sharedApplication]</code> if calling <code>nextResponder</code> returns <code>nil</code>. This is because a <code>UIViewController</code> that is currently not participating in the view controller hierarchy will return <code>nil</code> when asked for its <code>nextResponder</code>.</p>

<h4>App Delegate</h4>

<p>There is one thing I simply dropped up to now: The errors you get from a framework you are using do not contain the informations you need for the custom error presentation. To upgrade these errors to enriched ones, you can once again override <code>-willPresentError:</code>, but this time do it in your app delegate. Now you have a place where you can add nice error messages to your most common framework errors. You should also add a fallback error message that probably simply tells the user that <em>&lsquo;something went wrong&rsquo;</em>. That is not a very good error message, but it is for sure better than showing the user a <em>&lsquo;The operation couldn’t be completed. (Cocoa error 1570.)&rsquo;</em>.</p>

<h2>Presenting</h2>

<p>Now that we ensured that your error will get passed to your app delegate, all you have to do is to override <code>-presentError:completionHandler:</code> in your app delegate and configure a <code>UIAlertView</code> or any other custom view that can show the error to the user. In this single place you can easily customize your error UI to fit perfectly into your app design. No more ugly default alert views in your nicely crafted user interface!</p>

<h2>HRSCustomErrorHandling</h2>

<p>I have open sourced the little library that is driving the error handling in the HRS iOS app I am working on during the day. It has a couple of nice little features that make your error creation even easier. For example you can simply create a recovery attempter with recovery blocks that are executed once the user taps on an option in the alert view. It is available under the Apache 2.0 License on <a href="https://github.com/Hotel-Reservation-Service/HRSCustomErrorHandling">github as HRSCustomErrorHandling</a> and via <a href="http://cocoapods.org/?q=HRSCustomErrorHandling">cocoapods</a>. If you use it, I would be happy if you&rsquo;d let me know.</p>

<p>I also gave a talk about custom error handling. The slides are available in the <a href="/talks/">talks</a> section.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drawing buttons with blurred background]]></title>
    <link href="http://ios-coding.com/blog/2013/05/09/drawing-buttons-with-blurred-background/"/>
    <updated>2013-05-09T17:25:00+02:00</updated>
    <id>http://ios-coding.com/blog/2013/05/09/drawing-buttons-with-blurred-background</id>
    <content type="html"><![CDATA[<p>A glossy looking button is a well known and widely used type of button that everybody knows if he or she hasn&rsquo;t been on the moon the last couple of years. Apple uses these buttons excessive. In OS X as well as on iOS. Those buttons look nice and they work very well when trying to achieve a polished, three dimensional look. However, they are always used with a background color that differs from the surrounding background or the surrounding background doesn&rsquo;t have much detail. This is because if you use this button on a background that has a lot of detail, like a photo, they don&rsquo;t look like glass anymore, at all. The button looks very flat if you can see, that the background isn&rsquo;t distorted by the &lsquo;glass&rsquo; in any kind.</p>

<!-- more -->


<h2>CoreImage</h2>

<p>The solution to this problem sounds quite easy at first: As soon as you simply blur the background just a little, the whole thing starts looking great again. This is where CoreImage comes in handy. CoreImage has a ton of useful filters, one of them is a gaussian blur filter. Using this filter is pretty easy. All you need to do is specify you input image and the blur radius you would like to use.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">CIFilter</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">blur</span> <span class="o">=</span> <span class="p">[</span><span class="n">CIFilter</span> <span class="nl">filterWithName:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">CIGaussianBlur</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;];</span>
</span><span class='line'><span class="p">[</span><span class="n">blur</span> <span class="nl">setValue:</span><span class="err">@</span><span class="p">(</span><span class="n">blurRadius</span><span class="p">)</span> <span class="nl">forKey:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">inputRadius</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;];</span>
</span><span class='line'><span class="p">[</span><span class="n">blur</span> <span class="nl">setValue:</span><span class="n">inputImage</span> <span class="nl">forKey:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">inputImage</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;];</span>
</span><span class='line'><span class="n">CIImage</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">outputImage</span> <span class="o">=</span> <span class="p">[</span><span class="n">blur</span> <span class="n">outputImage</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>Note that you are dealing with <code>CIImage</code>&rsquo;s instead of <code>UIImage</code>&rsquo;s. So <code>inputImage</code> has to be a <code>CIImage*</code>.</em></p>

<h2>What to blur?</h2>

<p>Now that we know how to blur, the question would be: What to blur? And here is the point where things are getting difficult. There are three methods on CALayer that sound promising:</p>

<ul>
<li><code>setBackgroundFilters:</code> <em>&ldquo;An array of Core Image filters to apply to the content immediately behind the layer&rdquo;</em></li>
<li><code>setFilters</code>: <em>&ldquo;An array of Core Image filters to apply to the contents of the layer and its sublayers&rdquo;</em></li>
<li><code>setCompositingFilter</code>: <em>&ldquo;A CoreImage filter used to composite the layer and the content behind it&rdquo;</em></li>
</ul>


<p>All three methods are available on iOS, you can call them, the filters are set and they will be returned if you call the getter. But that&rsquo;s pretty much all these methods do, at least up to iOS6. Under <em>&ldquo;special considerations&rdquo;</em> Apple says <em>&ldquo;This property is not supported on layers in iOS&rdquo;</em>. Note that there was an error in the documentation on iOS 6.0, where it said <em>&ldquo;This property relies on the presence of Core Image and its filters. In iOS, Core Image is available in iOS 5 and later only&rdquo;</em>. They changed this in the iOS 6.1 documentation, so don&rsquo;t wonder if you see the second text, you selected the <em>old</em> version of the <code>CALayer</code> documentation.</p>

<p>So using one of these properties won&rsquo;t work on iOS. The only other approach I am aware of on iOS, is to render the underlaying layers into a context and blur it yourself. You can do this with <code>CALayer</code> again. The method you are looking for is <code>-[CALayer renderInContext:]</code></p>

<p>This method renders the receiver and it&rsquo;s sublayers to the context you specify. &lsquo;But I want to render the views!&rsquo; you might think. That&rsquo;s correct, but <code>UIView</code> is just the delegate of the underlying layer. Each <code>UIView</code> has a layer it is responsible for and the layer hierarchy is the same as the view hierarchy &ndash; unless you change something about this by yourself. The visible part of a <code>UIView</code> is the <code>CALayer</code>! If a view has five subviews, its layer has five sublayers and each of these sublayers belong to one of the subviews.</p>

<h2>Drawing</h2>

<p>To render the background of the button we want to blur, we simply walk up the view hierarchy until we find the first view that is opaque. If the view is opaque we can safely render this view and its subviews without worrying about transparent parts from underlaying views.</p>

<p>To achieve this, we create a new graphics context in the size of the button that should get the blurred background. We don&rsquo;t need to render the whole superview we just found, as we only need to blur the part that is behind our button. The rendered image is what we will use as our input image for the blur filter. Don&rsquo;t forget to hide the button during rendering, otherwise the button itself will be contained in the button&rsquo;s background.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">CGRect</span> <span class="n">renderRect</span> <span class="o">=</span> <span class="p">[</span><span class="n">viewToRender</span> <span class="nl">convertRect:</span><span class="n">rect</span> <span class="nl">fromView:</span><span class="n">self</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">UIGraphicsBeginImageContext</span><span class="p">(</span><span class="n">rect</span><span class="p">.</span><span class="n">size</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">CGContextTranslateCTM</span><span class="p">(</span><span class="n">UIGraphicsGetCurrentContext</span><span class="p">(),</span> <span class="o">-</span><span class="n">CGRectGetMinX</span><span class="p">(</span><span class="n">renderRect</span><span class="p">),</span> <span class="n">CGRectGetMaxY</span><span class="p">(</span><span class="n">renderRect</span><span class="p">));</span>
</span><span class='line'><span class="n">CGContextScaleCTM</span><span class="p">(</span><span class="n">UIGraphicsGetCurrentContext</span><span class="p">(),</span> <span class="mf">1.0f</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0f</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">[</span><span class="n">viewToRender</span><span class="p">.</span><span class="n">layer</span> <span class="nl">renderInContext:</span><span class="n">UIGraphicsGetCurrentContext</span><span class="p">()];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">CGImageRef</span> <span class="n">blurInputReference</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">()</span> <span class="n">CGImage</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">UIGraphicsEndImageContext</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">self</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>After rendering the view into a <code>CGImage</code> we convert this to a <code>CIImage</code> and set it as the input image of our blur filter. If you put all this code into your button&rsquo;s <code>drawInRect:</code> method, you can then draw the output image into the current context for displaying. After that, you can call all the other drawing code, if any, you need for your button.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">CIImage</span><span class="o">*</span> <span class="n">inputImage</span> <span class="o">=</span> <span class="p">[</span><span class="n">CIImage</span> <span class="nl">imageWithCGImage:</span><span class="n">blurInputReference</span><span class="p">];</span>
</span><span class='line'><span class="n">CGImageRef</span> <span class="n">blurOutput</span> <span class="o">=</span> <span class="p">[</span><span class="n">context</span> <span class="nl">createCGImage:</span><span class="n">outputImage</span> <span class="nl">fromRect:</span><span class="n">outputImage</span><span class="p">.</span><span class="n">extent</span><span class="p">];</span>
</span><span class='line'><span class="n">CGContextDrawImage</span><span class="p">(</span><span class="n">UIGraphicsGetCurrentContext</span><span class="p">(),</span> <span class="n">outputImage</span><span class="p">.</span><span class="n">extent</span><span class="p">,</span> <span class="n">blurOutput</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>Not that we render the output image with the extent of the <code>CIImage</code> as the blur filter will return an image that is larger than your input image. The extent property of you output image has a negative origin so that rendering the image with this extent will place your image exactly above your input image, with a border.</em></p>

<h2>BCBlurView on GitHub</h2>

<p>I have set up a <a href="https://github.com/michaelochs/BCBlurView" title="BCBlurView on github">GitHub project</a> that adds a method to <code>UIView</code> that renders the view&rsquo;s background with a given blur radius into the current context. You can call this method on any UIView in it&rsquo;s <code>drawRect:</code> method to get a blurred background. The static library also contains two subclasses, one of UIView and one of UIButton. Those adopt this category and, aside from others, make the blur radius available as a property for easier use.</p>

<h2>Special considerations</h2>

<p>This approach only works with still backgrounds. If you have any kind of animation in the background, this will not work. If the background changes, you have to call <code>setNeedsDisplay</code> on the view that has the blurred background. Note that blurring takes time, it is not possible to e.g. put a <code>UIScrollView</code> in the back of the button and call <code>setNeedsDisplay</code> on every scroll position change of the scroll view.</p>
]]></content>
  </entry>
  
</feed>
